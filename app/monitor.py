"""
–ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Perfect World.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –ü—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞
- –ê–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
- –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö
- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ Selenium
"""

import asyncio
import re
import pickle
import os
import time
import threading
import logging
import requests
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any

# –ò–º–ø–æ—Ä—Ç—ã Selenium
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.remote.webdriver import WebDriver
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from selenium.common.exceptions import NoSuchElementException

from requests.exceptions import ConnectionError as RequestsConnectionError

# –ò–º–ø–æ—Ä—Ç—ã Telegram
import telegram
from telegram.error import TelegramError

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
import schedule

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from models import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('monitor.log'),
        logging.StreamHandler()
    ]
)

class MarathonMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Perfect World."""

    def __init__(self, headless: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞.
        
        Args:
            headless: –§–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ headless-—Ä–µ–∂–∏–º–µ
        """
        self.cookies_dir = os.path.join('app', 'cookies')  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫–æ–≤
        self.headless = headless  # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±—Ä–∞—É–∑–µ—Ä–∞
        os.makedirs(self.cookies_dir, exist_ok=True)
        self.running = False  # –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∞
        self.selenium_url = os.getenv('SELENIUM_URL', 'http://selenium:4444/wd/hub')  # URL Selenium
        self.db = Database(os.getenv('DATABASE_URL'))  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')  # –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')  # ID —á–∞—Ç–∞ Telegram
        self.is_checking = False  # –§–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        # URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—Ä–∞—Ñ–æ–Ω–∞ (–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.marathon_url = self.db.get_setting('marathon_url', 'https://pwonline.ru/supermarathon2.php')
        
        self.ensure_selenium_ready()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Selenium
        logger.info(f"Selenium URL: {self.selenium_url}")

    # =============================================
    # –ú–µ—Ç–æ–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    # =============================================
    
    def send_telegram_notification(self, message: str) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.bot_token or not self.chat_id:
            return
        
        async def async_send():
            """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
            try:
                bot = telegram.Bot(token=self.bot_token)
                await bot.send_message(
                    chat_id=self.chat_id, 
                    text=self.escape_markdown_v2(message),
                    parse_mode="MarkdownV2"
                )
            except TelegramError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        
        try:
            asyncio.run(async_send())
        except RuntimeError:
            loop = asyncio.get_event_loop()
            loop.run_until_complete(async_send())

    def _send_grouped_reports(self, groups: dict, total_accounts: int, expiring_gifts: dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç—ã –ø–æ –≥—Ä—É–ø–ø–∞–º —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram."""
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success = sum(len(g['success']) for g in groups.values())
        errors = sum(len(g['errors']) for g in groups.values())
        
        header = (
            "\n"
            "üìä –û–¢–ß–ï–¢ –û –ü–†–û–í–ï–†–ö–ï –ê–ö–ö–ê–£–ù–¢–û–í\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"üîπ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total_accounts}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"‚ùå –û—à–∏–±–∫–∏: {errors}\n"
        )

        self.send_telegram_notification(header)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≥—Ä—É–ø–ø–∞–º
        for group_name, group_data in groups.items():
            if not any(group_data.values()):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –≥—Ä—É–ø–ø—ã
                continue
                
            message_parts = []
            message_parts.append(f"\nüè∑Ô∏è –ì–†–£–ü–ü–ê: {group_name.upper()}\n```")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if group_data['success']:
                message_parts.append("\n‚úÖ –£–°–ü–ï–®–ù–û:\n" + "\n".join(group_data['success']))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if group_data['changes']:
                message_parts.append("\nüéØ –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
                for change in group_data['changes']:
                    if len("\n".join(message_parts) + "\n" + change) > 3500:  # –õ–∏–º–∏—Ç Telegram
                        message_parts.append("\n```")
                        self.send_telegram_notification("\n".join(message_parts))
                        message_parts = [f"```\nüè∑Ô∏è –ì–†–£–ü–ü–ê: {group_name.upper()} (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)\n"]
                    message_parts.append("\n" + change)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏
            if group_data['errors']:
                message_parts.append("\n‚ö†Ô∏è –û–®–ò–ë–ö–ò:\n" + "\n".join(group_data['errors']))
            
            message_parts.append("\n```")
            full_message = "\n".join(message_parts)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(full_message) > 4096:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
                parts = []
                current_part = []
                current_length = 0
                
                for line in message_parts:
                    line_length = len(line) + 1  # +1 –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                    if current_length + line_length > 4000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
                        parts.append("\n".join(current_part))
                        current_part = []
                        current_length = 0
                    current_part.append(line)
                    current_length += line_length
                
                if current_part:
                    parts.append("\n".join(current_part))
                
                for part in parts:
                    self.send_telegram_notification(part)
                    time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            else:
                self.send_telegram_notification(full_message)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–∞—Ä–∫–∞—Ö
        if expiring_gifts:
            gifts_message = ["```\nüéÅ –ü–û–î–ê–†–ö–ò –°–ö–û–†–û –ò–°–¢–ï–ö–ê–Æ–¢:"]
            for username, gifts in expiring_gifts.items():
                gifts_message.append(f"\nüë§ {username}:")
                for gift in gifts:
                    gifts_message.append(f"  ‚Ä¢ {gift['name']} (–¥–æ {gift['expires']})")
            gifts_message.append("```")
            self.send_telegram_notification("\n".join(gifts_message))

    def escape_markdown_v2(self, text: str) -> str:
        # –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        escape_chars = r'_*[]()~`>#+-=|{}.!'
        escaped = []
        i = 0
        n = len(text)
        
        while i < n:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ ```
            if text.startswith('```', i):
                escaped.append('```')
                i += 3
                # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ ```
                end = text.find('```', i)
                if end == -1:
                    escaped.append(text[i:])
                    break
                escaped.append(text[i:end])
                escaped.append('```')
                i = end + 3
            else:
                char = text[i]
                if char in escape_chars:
                    escaped.append(f'\\{char}')
                else:
                    escaped.append(char)
                i += 1
        
        return ''.join(escaped)
    # =============================================
    # –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å Selenium
    # =============================================
    
    def ensure_selenium_ready(self) -> None:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Selenium —Å–µ—Ä–≤–µ—Ä–∞."""
        timeout = 600000000000000000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (—Å–µ–∫)
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            try:
                response = requests.get(f"{self.selenium_url}/status")
                if response.json().get('value', {}).get('ready'):
                    logger.info("Selenium Grid –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    return
            except RequestsConnectionError:
                logger.warning("–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Selenium...")
                time.sleep(5)
        
        raise ConnectionError("Selenium –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")

    def get_driver(self) -> WebDriver:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞.
        
        Returns:
            –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä WebDriver
            
        Raises:
            ConnectionError: –ü—Ä–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Selenium
        """
        chrome_options = Options()
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")

        max_attempts = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        attempt = 0
        
        while attempt < max_attempts:
            try:
                driver = webdriver.Remote(
                    command_executor=self.selenium_url,
                    options=chrome_options
                )
                driver.set_page_load_timeout(30)  # –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                driver.implicitly_wait(10)  # –ù–µ—è–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                return driver
            except WebDriverException as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: {str(e)}")
                attempt += 1
                time.sleep(2)
        
        raise ConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Selenium –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
    
    # =============================================
    # –ú–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
    # =============================================
    
    @staticmethod
    def parse_progress(progress_str: str) -> Tuple[int, int, float]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        
        Args:
            progress_str: –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "X/Y"
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –º–∞–∫—Å–∏–º—É–º, –ø—Ä–æ—Ü–µ–Ω—Ç)
        """
        try:
            x, y = map(int, progress_str.split('/'))
            return (x, y, (x/y)*100)
        except (ValueError, ZeroDivisionError):
            return (0, 1, 0)

    @staticmethod
    def parse_character_info(char_text: str) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ.
        
        Args:
            char_text: –¢–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ None
        """
        try:
            # –§–æ—Ä–º–∞—Ç: "–ò–º—è–ü–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ö–ª–∞—Å—Å, —É—Ä–æ–≤–µ–Ω—å: XX)"
            match = re.match(r'^(.+?)\s*\((.+?),\s*—É—Ä–æ–≤–µ–Ω—å:\s*(\d+)\)$', char_text)
            if match:
                return {
                    "name": match.group(1).strip(),
                    "class": match.group(2).strip(),
                    "level": int(match.group(3))
                }
            return {
                "name": char_text.strip(),
                "class": None,
                "level": None
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            return None

    def _get_progress_bar(self, percent: float) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π progress-bar.
        
        Args:
            percent: –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å progress-bar
        """
        filled = '‚ñà'
        empty = '‚ñë'
        width = 10  # –®–∏—Ä–∏–Ω–∞ progress-bar
        logger.info(percent)
        logger.info(int(round(percent / 100 * width)))
        filled_count = int(round(percent / 100 * width))        
        logger.info(filled * filled_count + empty * (width - filled_count))
        return filled * filled_count + empty * (width - filled_count)
    
    def _parse_gift_date(self, date_text: str) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∞—Ä–∫–∞."""
        try:
            # –§–æ—Ä–º–∞—Ç: "(–¥–æ 20:31 16.07.2025)"
            date_str = date_text.replace("(–¥–æ ", "").replace(")", "")
            return datetime.strptime(date_str, "%H:%M %d.%m.%Y")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_text}': {e}")
            return None
    # =============================================
    # –ú–µ—Ç–æ–¥—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    # =============================================
    
    def get_marathon_data(self, driver: WebDriver, username: str) -> List[Dict[str, Any]]:
        """
        –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ä–∞—Ñ–æ–Ω–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            driver: –≠–∫–∑–µ–º–ø–ª—è—Ä WebDriver
            username: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –º–∞—Ä–∞—Ñ–æ–Ω–∞
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö
            self.collect_characters_info(driver, username)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞—Ä–∞—Ñ–æ–Ω–∞
            driver.get(self.marathon_url)
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//div[@class='season_marathon']/div"))
            )
            
            tasks = []
            marathon_divs = driver.find_elements(By.XPATH, "//div[@class='season_marathon']/div")
            
            # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
            for task_div in marathon_divs:
                try:
                    name = task_div.find_element(By.XPATH, ".//div[@class='info']/b").text
                    progress = task_div.find_element(By.XPATH, ".//div[@class='progress']").text
                    x, y, percent = self.parse_progress(progress)
                    tasks.append({
                        "name": name,
                        "progress": progress,
                        "x": x,
                        "y": y,
                        "percent": percent
                    })
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–¥–∞–Ω–∏—è: {e}")
            
            return tasks
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä–∞—Ñ–æ–Ω–∞: {e}")
            return []

    def get_mdm_coins(self, driver: WebDriver) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ MDM –º–æ–Ω–µ—Ç.
        
        Args:
            driver: –≠–∫–∑–µ–º–ø–ª—è—Ä WebDriver
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∏–ª–∏ "0" –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            driver.get("https://pwonline.ru/chests2.php")
            coins_element = WebDriverWait(driver, 60).until(
                EC.presence_of_element_located((By.XPATH, 
                    "//div[@class='chest_shop']/div[@class='shop_filter_block']/div[@class='points_info']/strong"))
            )
            return coins_element.text.strip()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è MDM –º–æ–Ω–µ—Ç: {e}")
            return "0"

    def collect_characters_info(self, driver: WebDriver, username: str) -> None:
        """
        –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            driver: –≠–∫–∑–µ–º–ø–ª—è—Ä WebDriver
            username: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
        """

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã
        try:
            driver.get("https://pwonline.ru/promo_items.php")
            time.sleep(2)  # –ö—Ä–∞—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            empty_cart = driver.find_elements(By.XPATH, 
                "//div[@id='content_top']/h2[contains(text(), '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ –ø—É—Å—Ç–∞')]")
            if empty_cart:
                logger.info("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
                return
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã

        try:            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
            try:
                WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.XPATH, "//select[contains(@class, 'js-shard')]"))
                )
            except TimeoutException:
                logger.error("–°–µ–ª–µ–∫—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
            server_select = driver.find_element(By.XPATH, 
                "//div[@class='char_selector']/select[@class='js-shard']")
            servers = [option.text for option in server_select.find_elements(By.TAG_NAME, "option") if option.text]
            
            characters = {}
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            for server in servers:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–µ—Ä
                for option in server_select.find_elements(By.TAG_NAME, "option"):
                    if option.text == server:
                        option.click()
                        break
                
                time.sleep(1)  # –ü–∞—É–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                char_select = driver.find_element(By.XPATH, 
                    "//div[@class='char_selector']/select[@class='js-char']")
                char_options = char_select.find_elements(By.TAG_NAME, "option")
                
                # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö
                for option in char_options:
                    if option.text:
                        char_info = self.parse_character_info(option.text)
                        if char_info:
                            characters.setdefault(server, []).append(char_info)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if username and characters:
                self.db.save_account_characters(username, characters)           
        
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}") 
            
    # =============================================
    # –ú–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    # =============================================
    
    def check_account(self, cookie_file: str, skip_check: bool = False) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            cookie_file: –ò–º—è —Ñ–∞–π–ª–∞ —Å –∫—É–∫–∞–º–∏
            skip_check: –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Raises:
            Exception: –ï—Å–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        """
        if not skip_check and self.is_checking:
            raise Exception("–£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        
        try:
            self.is_checking = True
            username = cookie_file[:-4]  # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .pkl
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {username}")

            # –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
            with open(os.path.join(self.cookies_dir, cookie_file), 'rb') as f:
                cookies = pickle.load(f)
            
            driver = self.get_driver()
            try:
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–∫–æ–≤
                driver.get("https://pwonline.ru/")
                for cookie in cookies:
                    try:
                        driver.add_cookie(cookie)
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É–∫–∏: {str(e)}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                driver.get("https://pwonline.ru/supermarathon2.php")
                if "–í–æ–π—Ç–∏" in driver.title:
                    return {
                        "username": username,
                        "status": "error",
                        "message": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                    }
                
                # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
                tasks = self.get_marathon_data(driver, username)
                mdm_coins = self.get_mdm_coins(driver)
                
                if not tasks:
                    return {
                        "username": username,
                        "status": "error",
                        "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞—Ä–∞—Ñ–æ–Ω–∞"
                    }
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                timestamp = datetime.now()
                self.db.save_account_data(username, last_success=timestamp, mdm_coins=mdm_coins)
                
                for task in tasks:
                    self.db.save_task_data(
                        username,
                        task['name'],
                        task['x'],
                        task['y'],
                        task['percent'],
                        timestamp
                    )
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∞—Ä–∫–∏
                gifts = self._check_account_gifts(driver, username)
                    
                return {
                    "username": username,
                    "status": "success",
                    "mdm_coins": mdm_coins,
                    "tasks": tasks,
                    "gifts": gifts
                }
                
            finally:
                driver.quit()  # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {username}: {str(e)}")
            return {
                "username": username,
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–∫–æ–≤: {str(e)}"
            }   
        finally:
            self.is_checking = False

    def check_all_accounts(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∫—É–∫–∞–º–∏."""
        if self.is_checking:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è—é—â–µ–π—Å—è –ø—Ä–æ–≤–µ—Ä–∫–µ")
            return
            
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            self.is_checking = True
            accounts_data = []
            cookie_files = [f for f in os.listdir(self.cookies_dir) if f.endswith('.pkl')]
            
            if not cookie_files:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –∫—É–∫–∞–º–∏")
                self.send_telegram_notification("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å –∫—É–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–∞—Ö
            previous_data = {}
            groups = {}
            for username, alias, _, _, _, _, group_id, group_name, mdm_coins, tasks in self.db.get_accounts_with_tasks_and_groups():
                group_key = group_name or "–ë–µ–∑ –≥—Ä—É–ø–ø—ã"
                previous_data[username] = {
                    'alias': alias,
                    'group_id': group_id,
                    'group_name': group_key,
                    'mdm_coins': mdm_coins,
                    'tasks': {task[0]: (task[1], task[2]) for task in tasks} if tasks else {}
                }
                if group_key not in groups:
                    groups[group_key] = {
                        'success': [],
                        'errors': [],
                        'changes': []
                    }

            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
            expiring_gifts = {}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
            for cookie_file in cookie_files:
                account_data = self.check_account(cookie_file, skip_check=True)
                accounts_data.append(account_data)
                
                username = account_data['username']
                prev_data = previous_data.get(username, {})
                group_name = prev_data.get('group_name', "–ë–µ–∑ –≥—Ä—É–ø–ø—ã")
                display_name = account_data.get('alias', username)
                
                if account_data['status'] != 'success':
                    groups[group_name]['errors'].append(
                        f"üî¥ {display_name}: {account_data['message']}"
                    )
                    continue
                    
                groups[group_name]['success'].append(f"üü¢ {display_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                changes = []
                current_mdm = account_data.get('mdm_coins', '0')
                prev_mdm = prev_data.get('mdm_coins', '0')
                if current_mdm != prev_mdm:
                    try:
                        diff = int(current_mdm) - int(prev_mdm)
                        changes.append(
                            f"üí∞ –ú–æ–Ω–µ—Ç—ã –ú–î–ú: {'üîº +' if diff > 0 else 'üîΩ '}{abs(diff)} "
                            f"({prev_mdm} ‚Üí {current_mdm})"
                        )
                    except ValueError:
                        changes.append(f"üí∞ –ú–æ–Ω–µ—Ç—ã –ú–î–ú: {current_mdm} (–±—ã–ª–æ {prev_mdm})")
                
                task_changes = []
                current_tasks = {task['name']: (task['x'], task['y']) for task in account_data.get('tasks', [])}
                prev_tasks = prev_data.get('tasks', {})
                
                for task_name, (current_x, current_y) in current_tasks.items():
                    if task_name in prev_tasks:
                        prev_x, prev_y = prev_tasks[task_name]
                        if current_x != prev_x or current_y != prev_y:
                            progress = current_x/current_y*100
                            progress_bar = self._get_progress_bar(progress)
                            diff = current_x - prev_x
                            task_changes.append(
                                f"    {progress_bar} {task_name}: "
                                f"{current_x}/{current_y} "
                                f"({'üîº +' if diff > 0 else ''}{diff if diff != 0 else ''})"
                            )
                    else:
                        progress_bar = self._get_progress_bar(0)
                        task_changes.append(f"    {progress_bar} {task_name}: {current_x}/{current_y} (–Ω–æ–≤–æ–µ)")
                
                if task_changes:
                    changes.append("üìù –ó–∞–¥–∞–Ω–∏—è:\n" + "\n".join(task_changes))
                
                if changes:
                    groups[group_name]['changes'].append(
                        f"‚ú® {display_name} ({username}):\n" + 
                        "\n".join(changes)
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
                if 'gifts' in account_data  and account_data['gifts']:
                    expiring_gifts[username] = account_data['gifts']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
            self._send_grouped_reports(groups, len(accounts_data), expiring_gifts)
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ: {len(accounts_data)}")
        finally:
            self.is_checking = False

    # =============================================
    # –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
    # =============================================
    
    def activate_promo_code(self, promo_code: str, accounts: List[str]) -> Dict[str, int]:
        """
        –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
        
        Args:
            promo_code: –ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            accounts: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (—É—Å–ø–µ—à–Ω–æ, –æ—à–∏–±–∫–∏)
        """
        activated = 0
        errors = 0
        global_promo_status = 'active'  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞
        
        for username in accounts:
            if global_promo_status != 'active':
                # –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
                self.db.save_account_promo_code(username, promo_code, 'failed', 'promo_expired')
                errors += 1
                continue
                
            try:
                cookie_file = f"{username}.pkl"
                with open(os.path.join(self.cookies_dir, cookie_file), 'rb') as f:
                    cookies = pickle.load(f)
                
                driver = self.get_driver()
                try:
                    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                    driver.get("https://pwonline.ru/")
                    for cookie in cookies:
                        try:
                            driver.add_cookie(cookie)
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É–∫–∏: {str(e)}")
                    
                    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
                    driver.get(f"https://pw.mail.ru/pin.php?do=activate&game_account=1&pin={promo_code}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    error_div = driver.find_elements(By.XPATH, 
                        "//div[@id='content_body']/div[@class='m_error']")
                    if error_div:
                        error_text = error_div[0].text
                        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {error_text}")
                        
                        if "–ü–∏–Ω-–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" in error_text:
                            self.db.save_account_promo_code(username, promo_code, 'already_activated')
                            activated += 1
                        elif "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∏–Ω-–∫–æ–¥" in error_text:
                            self.db.save_promo_code_status(promo_code, 'invalid')
                            global_promo_status = 'invalid'
                            errors += 1
                        elif "–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø–∏–Ω-–∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ" in error_text:
                            self.db.save_promo_code_status(promo_code, 'expired')
                            global_promo_status = 'expired'
                            errors += 1
                        else:
                            errors += 1
                    else:
                        # –£—Å–ø–µ—à–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
                        self.db.save_account_promo_code(username, promo_code, 'success')
                        activated += 1
                finally:
                    driver.quit()
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è {username}: {str(e)}")
                errors += 1
        
        return {'activated': activated, 'errors': errors}

    def transfer_promo_to_game(self, driver, promo_code, character_name, server):
        try:
            # –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –∏–≥—Ä—É
            # –≠—Ç–æ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä—ã
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –∏–≥—Ä—É: {str(e)}")

    def _check_account_gifts(self, driver: WebDriver, username: str) -> List[dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∞—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö."""
        try:
            driver.get("https://pwonline.ru/promo_items.php")
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã
            empty_cart = driver.find_elements(By.XPATH,
                "//div[@id='content_top']/h2[contains(text(), '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ –ø—É—Å—Ç–∞')]")
            
            if empty_cart:
                return []
                
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏
            gifts = []
            gift_elements = driver.find_elements(By.XPATH,
                "//div[@class='items_container']/form[@class='js-transfer-form']/div[@class='promo_container']//table[@class='promo_items']/tbody/tr")
            
            for gift in gift_elements:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ XPath –≤—ã—Ä–∞–∂–µ–Ω–∏—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ gift
                    date_element = gift.find_element(By.XPATH, ".//span[@class='date_end']")
                    date_text = date_element.text.strip()
                    
                    label_element = gift.find_element(By.XPATH, ".//label")
                    name = label_element.text.replace(date_text, "").strip()
                    
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                    expires = self._parse_gift_date(date_text)
                    if expires and (expires - datetime.now()).days <= 7:  # –¢–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∫–∏ —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º
                        gifts.append({
                            'name': name,
                            'expires': date_text.replace("(–¥–æ ", "").replace(")", "")
                        })
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è {username}: {e}")
            
            return gifts
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è {username}: {e}")
            return []
    # =============================================
    # –ú–µ—Ç–æ–¥—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    # =============================================
    
    def start_scheduled_monitoring(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        if self.running:
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.running = True
        self.check_all_accounts()  # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
        schedule.every(30).minutes.do(self.check_all_accounts)
        
        def schedule_loop():
            """–¶–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."""
            while self.running:
                schedule.run_pending()
                time.sleep(1)
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=schedule_loop, daemon=True).start()

    def stop_monitoring(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        self.running = False
